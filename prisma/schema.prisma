generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String                   @id @default(cuid())
  username                String                   @unique
  email                   String                   @unique
  emailVerified           Boolean                  @default(false)
  passwordHash            String
  comments                Comment[]
  passwordResetTokens     PasswordResetToken[]
  EmailVerificationTokens EmailVerificationToken[]
  sessions                Session[]
  tickets                 Ticket[]
}

model PasswordResetToken {
  tokenHash String   @id
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  code      String
  expiresAt DateTime
  userId    String
  email     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Session {
  id        String   @id
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Ticket {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  title     String
  content   String       @db.VarChar(1024)
  status    TicketStatus @default(OPEN)
  bounty    Int
  deadline  String
  userId    String
  comments  Comment[]
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String   @db.VarChar(1024)
  ticketId  String
  userId    String?
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])

  @@index([ticketId])
  @@index([userId])
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  DONE
}
